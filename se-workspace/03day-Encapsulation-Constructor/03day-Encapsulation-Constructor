	**3day 주요 목차**
	Encapsulation 개념 
   	setter / getter 
   	Constructor 생성자 문법 
   	UML 중 Class Diagram

	---------------------------------------------------------
	
	Object Oriented Concept 객체 지향 개념 
	:객체를 시스템의 기본 단위로 하여 객체간의 관계를 중심으로 분석 설계 구현하는 프로그래밍 개념
	
	Object Oriented 주요 개념 ( key Concept ) 
	- 응집도( Cohesion) 와 결합도(Coupling)
	- Encapsulation 캡슐화
	- Inheritance 상속
	- Ploymorphism 다형성
	---------------------------------------------------------
	- 응집도와 결합도
		: High Cohesion(높은 응집도) low Coupling(낮은 결합도)
													Loose Coupling( 느슨한 결합도)
		응집도 -> 모듈(단위:객체) 내부에서 모듈의 고유한 목적에 집중하는 정보 -> 높아야 된다
		결합도 -> 모듈간의 상호 의존도 
		
- Encapsulation 캡슐화
	:	public interface , private implementation
		모듈을 인터페이스(소통부) 와 구현부로 분리해서 설계,개발
		인터페이스는 공개하고 구현부는 은닉한다.
		
		why? Information Hiding 정보 은닉 , 정보 보호 
				->	외부에 공개할 필요가 없는 정보 및 주요 로직을 감추어져서 보호한다 
			왜쓰는가 ? 소통부(인터페이스)로 상호작용 하므로 구현부가 변경되어도 외부 영향이 최소화 된다.
			->	결합도를 느슨하게 하여 유지보수성이 향상된다
			
			
			사용하는  측에서는 소통부(인터페이스)만 파악해서 개발이 가능하다  
			-> 생산성이 향상된다
			ex) Google Map API(Application Programming Interface)를 이용해
				지도 서비스를 제공함	-> Google Map 의 내부 구현부를 몰라도 인터페이스만 파악해 
														지도 서비스를 적용할 수 있다
			- setter , getter 
			
			setter : 캡슐화된 자원(인스턴스 변수)의 정보를 할당하고자 할 때 사용 
			
			ex ) public void setName(String name) {
				
				this.name = name;	// this는 현재 객체를 가르키는 자바 키워드 
			}	
			
			getter : 캡슐화된 자원(인스턴스 변수)의 정보를 얻고자 할 때 사용 
			
			ex ) public String getName() {
				return name;
			}
			- java 명명 규칙 (camel case)
			package 명 : 소문자로 구성 	ex ) org.kosta.cafe
			class 명 : 대문자로 시작 , 이후  소문자로 구성 , 합성어 첫글자는 대문자  ex) MyHouse
			variable 명 : 소문자로 구성 , 합성어의 첫글자는 대문자 ex) memberPassword 
			method 명 : 소문자로 구성 , 합성어의 첫글자는 대문자 ex)setMemberPassword()
			constant 명(상수명) : 대문자로 구성 , 합성어는 .... underscore로 연결  ex) COMPANY_ID 
			
			- Constructor 생성자
			: 객체 생성시 실행되는 클래스 구성요소 
			why ? 객체 초기화를 위해 명시
						객체 생성시점에 필요한 초기작업을 구성하기 위해 생성자를 명시해 사용한다.
									
			특징 
			클래스 내부에 개발자가 생성자를 명시하지 않으면 
			기본 생성자(default constructor) 를 컴파일러가 자동 삽입
			생성자 명은 클래스 명과 동일하다
			메서드와 다르게 별도의 리턴타입을 명시하지 않는다 
			
			
			필요시 	생성자를 직접 명시해야 하는 이유 			
			-> 특정 객체가 생성되기 전에 필요로 하는 초기 작업을 수행하기 위해 생성자를 직접 명시한다 
				ex) 신용카드 객체가 생성되기 위해서는 객체 생성 전에 고객으로 부터 개인정보를 전달받아 
						신용등급을 확인한 후 카드 객체를 생성해야 한다  
			- UML : Unified Modeling Language 객체 지향 분석 설계시 사용하는 표기 언어 
				분석 -> UseCase Diagram
				설계 -> Class Diagram 
			
		**4day 주요목차**
		- java 의 Data Type : primitive Data Type(기본형 데이터 타입) 과 Reference Data Type( 참조형 데이터 타입 )
		참조형 데이터 타입 : 객체를 참조하는 타입 ex) 문자열 	
		- 연산자 + , - , && , || 
		- 제어문 : 조건문( if ~ else if ~ else / switch case ) 
						반복문( for  / while / do while ) 
		- 객체 초기화 단계 ( 생성되면서 어떤 초기화 단계가 일어나는지 - 묵시적 초기화 명시적 초기화 
		- 변수의 종류와 특징  / 자바 메모리 구조(간단하게 볼것임) 
						
							